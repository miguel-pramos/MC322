@startuml diagram
' A linha de raciocínio utilizada para construir o diagrama foi guiada pelo uso de UML
' e pela indicação dos relacionamentos.;

' --- Entidades e Tipos ---
interface Entidade {
    +getX(): int
    +getY(): int
    +getZ(): int
    +getTipo(): TipoEntidade
    +getDescricao(): String
    +getRepresentacao(): char
}

enum TipoEntidade {
    VAZIO
    ROBO
    OBSTACULO
    DESCONHECIDO
}

enum EstadoRobo {
    LIGADO
    DESLIGADO
}

' --- Acao ---
interface Acao {
    +getNome(): String
    +executar()
}

' --- CatalogoRobos ---
class CatalogoRobos {
    -catalogo: HashMap<String, HashMap<String, Class<? extends Robo>>>
    {static} +registrarRobo(String categoria, Class<? extends Robo> classeRobo)
    {static} +getCategorias(): ArrayList<String>
    {static} +getRobosPorCategoria(String categoria): ArrayList<String>
    {static} +criarRobo(String categoria, String nomeClasse, String nome, int posicaoX, int posicaoY, int posicaoZ): Robo
    {static} +getTodasClasses(): ArrayList<Class<? extends Robo>>
}

' --- GeometryMath ---
class GeometryMath {
    {static} +distanciaEuclidiana(Entidade e1, int x, int y, int z): double
    {static} +distanciaEuclidiana(Entidade e1, Entidade e2): double
}

' --- Ambiente ---
class Ambiente {
    -comprimento: int
    -largura: int
    -altura: int
    -entidades: ArrayList<Entidade>
    -entidadesRemovidas: ArrayList<Entidade>
    -mapa: TipoEntidade[][][]
    +Ambiente(int comprimento, int largura, int altura)
    +dentroDosLimites(int x, int y, int z): boolean
    +adicionarEntidade(Entidade entidade)
    +removerEntidade(Entidade entidade): void
    +moverEntidade(Entidade entidade, int novoX, int novoY, int novoZ): void
    +visualizarAmbiente(): void
    +getLargura(): int
    +getComprimento(): int
    +getAltura(): int
    +getEntidades(): ArrayList<Entidade>
    +getEntidadesRemovidas(): ArrayList<Entidade>
    +getRobos(): ArrayList<Robo>
    +getObstaculos(): ArrayList<Obstaculo>
}

' --- Obstaculo e TipoObstaculo ---
class Obstaculo implements Entidade {
    -posX: int
    -posY: int
    #tipoObstaculo: TipoObstaculo // Renomeado para clareza, era 'tipo'
    -tipos: TipoObstaculo[]
    +Obstaculo()
    +getPosX(): int
    +getPosY(): int
    +getTipoObstaculo(): TipoObstaculo
    +getNome(): String
    --
    +getX(): int
    +getY(): int
    +getZ(): int
    +getTipo(): TipoEntidade
    +getDescricao(): String
    +getRepresentacao(): char
}

enum TipoObstaculo {
    PEDRA
    ARVORE
    MURO
    #largura: int
    #comprimento: int
    #altura: int
    #dano: int
    +getLargura(): int
    +getComprimento(): int
    +getAltura(): int
    +getDano(): int
    +getRepresentacao(): char
}

' --- Robo e suas subclasses ---
abstract class Robo implements Entidade, Comunicavel {
    #nome: String
    #id: String
    #HP: int
    #x: int
    #y: int
    #z: int
    #tipoEntidade: TipoEntidade // Renomeado para clareza, era 'tipo'
    #estado: EstadoRobo
    #acoes: ArrayList<Acao>
    #sensores: ArrayList<Sensor>
    #inicializarAcoes(): void
    #inicializarSensores(): void
    +Robo(String nome, int x, int y, int HP)
    +Robo(String nome, int x, int y, int z, int HP)
    +alternarEstado(): boolean
    +executarTarefa(Acao acao)
    +tomarDano(int dano)
    +exibirPosicao()
    +getAcoes(): ArrayList<Acao>
    +getSensores(): ArrayList<Sensor>
    +getX(): int
    +setX(int x)
    +getY(): int
    +setY(int y)
    +getZ(): int
    +setZ(int z)
    +getNome(): String
    +getID(): String
    +getHP(): int
    +getEstado(): EstadoRobo
    --
    +getTipo(): TipoEntidade
    +getDescricao(): String
    +getRepresentacao(): char
    --
    +enviarMensagens(Comunicavel comunicavel, String mensagem)
    +receberMensagens(String mensagem)
}

interface Comunicavel {
    +enviarMensagens(Comunicavel comunicavel, String mensagem)
    +receberMensagens(String mensagem)
}

abstract class RoboTerrestre extends Robo {
    -velocidadeMaxima: int
    +RoboTerrestre(String nome, int posicaoX, int posicaoY, int HP)
}

class RoboTanque extends RoboTerrestre {
    -balasRestantes: int
    -dano: int
    -alcance: int
    +RoboTanque(String nome, int posicaoX, int posicaoY)
    +atirar(RoboTerrestre alvo)
}

class RoboAntiAereo extends RoboTerrestre {
    -balasRestantes: int
    -dano: int
    -alcance: int
    +RoboAntiAereo(String nome, int posicaoX, int posicaoY)
    +atirar(RoboAereo alvo)
}

abstract class RoboAereo extends Robo {
    -altitudeMaxima: int
    -altitudeAtual: int // Renomeado para clareza, era 'altitude'
    +RoboAereo(String nome, int posicaoX, int posicaoY, int HP, int altitude, int altitudeMaxima)
    +subir(int deltaZ)
    +descer(int deltaZ)
    +getAltitudeAtual(): int
}

class RoboJato extends RoboAereo {
    -misseisRestantes: int
    -rajadasRestantes: int
    -alcanceMissil: int
    -alcanceMetralhadora: int
    -danoMissil: int
    -danoMetralhadora: int
    +RoboJato(String nome, int posicaoX, int posicaoY)
    +lancarMissil(RoboAereo alvo)
    +atirarRajada(RoboTerrestre alvo)
}

class RoboDrone extends RoboAereo {
    -bateria: int
    +RoboDrone(String nome, int posicaoX, int posicaoY)
    +mover(int deltaX, int deltaY) ' Este mover é específico do Drone? Robo já tem mover.
}

' --- Sensor e suas subclasses ---
abstract class Sensor {
    -raioDeAlcance: double
    -acao: Acao
    -robo: Robo
    +Sensor(double raioDeAlcance, Robo robo)
    +getRobo(): Robo
    +getAcao(): Acao
    +setAcao(Acao acao)
    +getRaioDeAlcance(): double
}

class SensorRobo extends Sensor {
    +SensorRobo(double raioDeAlcance, Robo robo)
}

class SensorObstaculo extends Sensor {
    +SensorObstaculo(double raioDeAlcance, Robo robo)
}

' --- Controlador ---
class Controlador {
    {static} +main(String[] args)
    {static} -inicializarRobos()
    {static} -inicializarSim()
    {static} -interagir(Robo robo)
    {static} -imprimirAmbiente(Robo robo)
    {static} +getScanner(): Scanner
    {static} +getAmbiente(): Ambiente
    {static} +getComunicacao(): CentralComunicacao
}

' --- CentralComunicacao e Mensagem (assumindo que existem no lab04) ---
class CentralComunicacao {
    -mensagens: ArrayList<Mensagem>
    +registrarMensagem(String remetente, String texto)
    +exibirLogMensagens()
}

class Mensagem {
    -remetente: String
    -texto: String
    -timestamp: LocalDateTime
    +Mensagem(String remetente, String texto)
    +getRemetente(): String
    +getTexto(): String
    +getTimestamp(): LocalDateTime
}


' --- Habilidades ---

interface Atacante {
    +executarAtaque(Entidade alvo)
    +podeAtacar(Entidade alvo): boolean
}
interface Explorador {
    +escanearArea(): List<Entidade>
}
interface Autonomo {
    +setModoAutonomo(boolean ativar)
    +isAutonomo(): boolean
}


' --- Agentes Inteligentes ---
abstract class AgenteInteligente extends Robo {
    #missao: Missao
    +AgenteInteligente(String nome, int x, int y, int HP)
    +definirMissao(Missao m)
    +temMissao(): boolean
    +executarMissao(Ambiente a)
}

class RoboAtacante extends AgenteInteligente {
    +RoboAtacante(String nome, int x, int y)
}
class RoboDesconstruido extends AgenteInteligente {
    +RoboDesconstruido(String nome, int x, int y)
}
class RoboExplorador extends AgenteInteligente {
    +RoboExplorador(String nome, int x, int y)
}


' --- Missões ---

abstract class Missao {
    #objetivo: String
    #concluida: boolean
    +Missao(String objetivo)
    +executar(Robo robo, Ambiente ambiente)
    +isConcluida(): boolean
}

class MissaoDestruirObstaculo extends Missao {
    +MissaoDestruirObstaculo()
}
class MissaoExploracao extends Missao {
    +MissaoExploracao()
}
class MissaoDanoGlobal extends Missao {
    +MissaoDanoGlobal()
}

class Logger {
    {static} +log(String mensagem)
}


' --- Relacionamentos ---

' Ambiente
Ambiente "1" *-- "0..*" Entidade : contém >
Ambiente ..> TipoEntidade : usa para mapa

' Robo
Robo "1" *-- "1" EstadoRobo
Robo ..> TipoEntidade : usa para tipoEntidade
Robo "1" *-- "0..*" Acao : possui >
Robo "1" *-- "0..*" Sensor : possui >

' Obstaculo
Obstaculo "1" o-- "1" TipoObstaculo : é do tipo >

' Sensor
Sensor "1" -- "1" Acao : dispara >

' CatalogoRobos
CatalogoRobos ..> Robo : cria

' GeometryMath
GeometryMath ..> Entidade : calcula distância

' Controlador
Controlador ..> Ambiente : gerencia
Controlador ..> CatalogoRobos : usa para criar robos
Controlador ..> CentralComunicacao : usa
Controlador ..> GAME_STATUS

' CentralComunicacao
CentralComunicacao "1" *-- "0..*" Mensagem : registra >

' Habilidades
RoboJato ..|> Atacante
RoboTanque ..|> Atacante
RoboAntiAereo ..|> Atacante
RoboAntiAereo ..|> Autonomo
RoboDrone ..|> Explorador

' Agentes Inteligentes
AgenteInteligente "1" o-- "0..1" Missao : executa >
RoboAtacante ..> MissaoDanoGlobal : usa
RoboDesconstruido ..> MissaoDestruirObstaculo : usa
RoboExplorador ..> MissaoExploracao : usa
Missao ..> Logger : usa para log

@enduml
